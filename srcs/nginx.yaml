apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx_img
        imagePullPolicy: Never
        ports:
          - containerPort: 22  
          - containerPort: 80
          - containerPort: 443  

---

apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  annotations:
   metallb.universe.tf/allow-shared-ip: minikube
spec:
  selector:
    app: nginx
  ports:
  - name: http
    protocol: TCP
    port: 80
  - name: https
    protocol: TCP
    port: 443
  - name: ssh
    port: 22
    protocol: TCP
  type: LoadBalancer
  loadBalancerIP: 192.168.99.188

#apiVersion — это используемая для создания объекта версия API Kubernetes. Иными словами, каждый объект имеет свою версию API в котором он определен и готов к использованию. Для Deployment apps/v1. Чтобы узнать в какой версии API Kubernetes определен тот или иной объект смотрим справочник.
#Kind: задаёт вид ресурса Kubernetes, который мы хотим создать.
#Name: имя ресурса.
#Spec: объект, который описывает нужное состояние ресурса.
#Replicas: свойство объекта спецификаций развёртывания, которое задаёт то, сколько экземпляров (реплик) подов нужно запустить.
#Template: этот объект задаёт шаблон пода, который описываемый ресурс Deployment будет использовать для создания новых подов.
#Image: образ контейнера, который мы хотим запустить в данном поде.
#Name: уникальное имя для контейнера, находящегося в поде.
#ContainerPort: порт, который прослушивает контейнер. Этот параметр можно считать указанием для того, кто читает этот файл (если этот параметр опустить, это не ограничит доступ к порту).
#ImagePullPolicy: определяет порядок работы с образами. 
#Тут возникает вопрос о том, как сервису понять, с какими именно подами ему нужно работать, то есть — как узнать о том, на основе каких сведений система должна генерировать список конечных точек для подов. 
#Делается это с помощью ещё одной абстракции Kubernetes, которая называется Label (метка).
#Type: тип ресурса, указываемый в его спецификации. Мы выбрали тип LoadBalancer, так как с помощью этого сервиса мы хотим решить задачу балансировки нагрузки между подами.
#Port: порт, по которому сервис принимает запросы.
#Selector: объект, содержащий сведения о том, с какими подами должен работать сервис.
#app: nginx: это свойство указывает на то, с какими подами будет работать сервис. А именно — это поды, которым назначена метка app: nginx.